module QueryGenerator
  require "singleton"

  # Configuration holder for the whole plugin.
  #
  # You can set/override a configuration value by calling
  #   QueryGenerator::Configuration.set(key, value)
  # Important: This is using a recursive merging function for ruby hashes. Please have a look at the core
  #            extensions
  #
  # Available options:
  #
  # :exclusions
  #   This sets classes and modules which should not be included into the
  #   class linkage graph generated by the DataHolder.
  #   It is a ruby hash with the two keys
  #     :classes and
  #     :modules
  #   which both hold an array of Class / array of Module.
  #
  # :javascript
  #   Options used by the core extensions for some classes, e.g. String, Hash, Array
  #   They are used to convert ruby objects to javascript object strings.
  #   Yes, you could use .to_json, but sometimes this does not produce exactly
  #   what you need.
  #   Available options here:
  #     :indicators -- Array of javascript indicators. If a string starts with one of them, it won't be converted to a javascript string
  #     :end_classes -- Classes which do not contain any more classes to be converted
  #     :container_classes -- Classes which do contain other objects to be converted

  class Configuration
    include Singleton
    include HelperFunctions

    def self.get(config_name)
      self.instance
      self.instance.get(config_name)
    end

    def self.set(config_name, value)
      self.instance
      self.instance.set(config_name, value)
    end

    def initialize
      @configuration = HashWithIndifferentAccess.new
      @configuration[:exclusions] = HashWithIndifferentAccess.new(:classes => [], :modules => [])
      @configuration[:javascript] = HashWithIndifferentAccess.new(:indicators => ["javascript:", "js:", "jQuery(", "$(", "$F("],
                                                                  :end_classes => [String, Symbol, Date, DateTime],
                                                                  :container_classes => [Array, Hash])
    end

    def get(config_name)
      @configuration[config_name] ||= HashWithIndifferentAccess.new
    end

    def set(config_name, value)
      get(config_name)
      @configuration.recursive_merge!(HashWithIndifferentAccess.new(config_name => value))

      DataHolder.instance.reload! if config_name.to_s == "exclusions"
    end
  end
end
