module QueryGenerator
  # Configuration holder for the whole plugin.
  #
  # You can set/override a configuration value by calling
  #   QueryGenerator::Configuration.set(key, value)
  #
  # Important: This is using ActiveSupport's deep_merge function for ruby hashes.
  #            The documentation can be found here:
  #            http://rubydoc.info/docs/rails/2.3.8/ActiveSupport/CoreExtensions/Hash/DeepMerge
  #
  # Available options:
  #
  # :exclusions
  #   This sets classes and modules which should not be included into the
  #   class linkage graph generated by the DataHolder.
  #   It is a ruby hash with the two keys
  #     :classes and
  #     :modules
  #   which both hold an array of Class / array of Module. By default, the plugin will not include
  #   its own classes.
  #
  #   **Example** with models Model1, Model2, MyModule::Model3, MyModule::Model4
  #   QueryGenerator::Configuration.set(:exclusions, :classes => [Model1, Model2], :modules => [MyModule])
  #   The :modules-part in this example will exclude Model3 and Model4 without having to specify them.
  #
  # :javascript
  #   Options used by the core extensions for some classes, e.g. String, Hash, Array
  #   They are used to convert ruby objects to javascript object strings.
  #   Yes, you could use .to_json, but sometimes this does not produce exactly
  #   what you need.
  #   Available options here:
  #     :indicators        -- Array of javascript indicators. If a string starts with one of them,
  #                           it won't be converted to a javascript string
  #     :end_classes       -- Classes which do not contain any more classes to be converted
  #     :container_classes -- Classes which do contain other objects to be converted
  #
  # :controller
  #   Options around the plugin controller, e.g. the layout used by the application.
  #   Available options here:
  #     :layout -- The layout file used to the render the actions. By default, the plugin brings its own layout
  #
  # :access_control
  #    Options to restrict access to the query generator (or application models)
  #    Available options here:
  #      :use_cancan -- If this is set to true, the plugin will check user rights for each application model.
  #                     This means that e.g. a model is not displayed unless the user has the "read" ability for it.
  #                     Default value is -false-
  #
  # :pagination
  #    Options for the will_paginate gem.
  #    Available options here:
  #      :remote_renderer -- query_generator uses remote pagination in some views. As will_paginate does not
  #                          allows this out of the box, a helper class is required. query_generator has its own
  #                          remote renderer, but you can set your own if you already created one in your main
  #                          application
  #      :per_page        -- Sets how many records are displayed by default
  #
  # :localization
  #   Options used to set the default formats for I18n.l
  #   Available options here:
  #     :date     -- Format for Date objects. Default is :short
  #     :datetime -- Format for DateTime objects. Default is :short
  #     :time     -- Format for Time objects. Default is :short

  class Configuration
    unloadable if Rails.env.development?

    include HelperFunctions

    def self.get(config_name)
      initialize_configuration unless defined?(@@configuration)
      @@configuration[config_name] ||= HashWithIndifferentAccess.new
    end

    def self.set(config_name, value)
      initialize_configuration unless defined?(@@configuration)
      @@configuration.deep_merge!(HashWithIndifferentAccess.new(config_name => value))

      DataHolder.instance.reload! if config_name.to_s == "exclusions"
    end

    private

    # Loads the initial configuration
    #--------------------------------------------------------------
    def self.initialize_configuration
      @@configuration = HashWithIndifferentAccess.new
      @@configuration[:exclusions] = HashWithIndifferentAccess.new(:classes => [], :modules => [QueryGenerator])
      @@configuration[:javascript] = HashWithIndifferentAccess.new(:indicators => ["javascript:", "js:", "jQuery(", "$(", "$F(", "function("],
                                                                  :end_classes => [String, Symbol, Date, DateTime],
                                                                  :container_classes => [Array, Hash])
      @@configuration[:controller] = HashWithIndifferentAccess.new(:layout => "query_generator")
      @@configuration[:access_control] = HashWithIndifferentAccess.new(:use_cancan => false)
      @@configuration[:pagination] = HashWithIndifferentAccess.new(:remote_renderer => "QueryGeneratorRemoteLinkRenderer", :per_page => 20)
      @@configuration[:localization] = HashWithIndifferentAccess.new(:date => :short, :datetime => :short, :time => :short)
    end

  end
end
